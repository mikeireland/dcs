"""
From the code in the main header file in-between two key comment strings, 
find each struct, and each field in the struct. Then create commander_struct.h
defining the json structs for each struct and field.
"""
import os
import sys

# The first argument is the path to the main header file, and the second 
# argument is the path to the output file.
if len(sys.argv) != 3:
    print("Usage: python make_commander_structs.py <input_file> <output_file>")
    sys.exit(1)
input_file = sys.argv[1]
output_file = sys.argv[2]
# The first line of the input file is the path to the main header file.
with open(input_file, 'r') as f:
    lines = f.readlines()

#Also open the output file for writing - it may have to be created
with open(output_file, 'w') as f:
    # Write the header for the output file.
    f.write("// This file is generated by make_commander_structs.py\n")
    f.write("namespace nlohmann {\n")
        
    # Find the start and end of the structs in the file.
    start = -1
    end = -1
    for i, line in enumerate(lines):
        if line.startswith("//-------Commander structs-------------"):
            start = i + 1
        elif line.startswith("//-------End of Commander structs------"):
            end = i
            break
    if start == -1 or end == -1:
        print("Could not find start and end of Commander structs in file.")
        sys.exit(1)
    # Get the structs from the file.
    structs = lines[start:end]
    # Create a list of structs.
    structs_list = []
    # If the line starts with "struct", then it is a struct.
    for line in structs:
        if line.startswith("struct"):
            # Get the name of the struct.
            struct_name = line.split("{")[0].split(" ")[1][:-1]
            # Print the name of the struct.
            print(f"Struct: {struct_name}")
            # Get the fields of the struct.
            fields = []
            for field in structs[structs.index(line) + 1:]:
                if field.startswith("};"):
                    break
                # Get the names of the fields, which could be separated
                # by commas, with a ; after the last field.
                field = field.split(";")[0]
                # If the field is a comment, skip it.
                if field.startswith("//") or field.startswith("{"):
                    continue
                field_strings = field.split(",")
                # Get the name of the field.
                for this_string in field_strings:
                    fields += [this_string.split(" ")[-1]]
                    print(f"Field: {fields[-1]}")
            # Write the struct to the output file.
            f.write(f"template <> struct adl_serializer<{struct_name}> {{\n")
            f.write(f"    static void to_json(json& j, const {struct_name}& p) {{\n")
            f.write(f"        j = json::object();\n")
            # Write the fields to the output file.  
            for field in fields:
                f.write(f"        j[\"{field}\"] = p.{field};\n")
            f.write("    }\n")
            f.write(f"    static void from_json(const json& j, {struct_name}& p) {{\n")
            f.write(f"        p = {struct_name}();\n")
            # Write the fields to the output file.
            for field in fields:
                f.write(f"        j.at(\"{field}\").get_to(p.{field});\n")
            f.write("    }\n")
            f.write("   };\n")
    f.write("}\n")
    # Write the footer for the output file.
    f.write("// End of file\n")
    f.write("// This file is generated by make_commander_structs.py\n")
    f.write("// Do not edit this file manually.\n") 
            