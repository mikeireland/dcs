// Settings serialization for commander
namespace nlohmann {
template <> struct adl_serializer<Settings> {
    static void to_json(json& j, const Settings& s) {
        j = json::object();
        j["n_gd_boxcar"] = s.n_gd_boxcar;
        j["gd_threshold"] = s.gd_threshold;
        j["pd_threshold"] = s.pd_threshold;
        j["gd_search_reset"] = s.gd_search_reset;
        j["offload_time_ms"] = s.offload_time_ms;
        j["offload_gd_gain"] = s.offload_gd_gain;
        j["gd_gain"] = s.gd_gain;
        j["kp"] = s.kp;
        j["delay_line_type"] = s.delay_line_type;
        j["servo_mode"] = s.servo_mode;
        j["offload_mode"] = s.offload_mode;
        j["search_delta"] = s.search_delta;
    }
    static void from_json(const json& j, Settings& s) {
        s = Settings();
        j.at("n_gd_boxcar").get_to(s.n_gd_boxcar);
        j.at("gd_threshold").get_to(s.gd_threshold);
        j.at("pd_threshold").get_to(s.pd_threshold);
        j.at("gd_search_reset").get_to(s.gd_search_reset);
        j.at("offload_time_ms").get_to(s.offload_time_ms);
        j.at("offload_gd_gain").get_to(s.offload_gd_gain);
        j.at("gd_gain").get_to(s.gd_gain);
        j.at("kp").get_to(s.kp);
        j.at("delay_line_type").get_to(s.delay_line_type);
        j.at("servo_mode").get_to(s.servo_mode);
        j.at("offload_mode").get_to(s.offload_mode);
        j.at("search_delta").get_to(s.search_delta);
    }
};
}
// This file is generated by make_commander_structs.py
namespace nlohmann {
template <> struct adl_serializer<EncodedImage> {
    static void to_json(json& j, const EncodedImage& p) {
        j = json::object();
        j["szx"] = p.szx;
        j["szy"] = p.szy;
        j["type"] = p.type;
        j["message"] = p.message;
    }
    static void from_json(const json& j, EncodedImage& p) {
        p = EncodedImage();
        j.at("szx").get_to(p.szx);
        j.at("szy").get_to(p.szy);
        j.at("type").get_to(p.type);
        j.at("message").get_to(p.message);
    }
   };
template <> struct adl_serializer<Status> {
    static void to_json(json& j, const Status& p) {
        j = json::object();
        j["gd_bl"] = p.gd_bl;
        j["pd_bl"] = p.pd_bl;
        j["gd_tel"] = p.gd_tel;
        j["pd_tel"] = p.pd_tel;
        j["gd_snr"] = p.gd_snr;
        j["pd_snr"] = p.pd_snr;
        j["closure_phase_K1"] = p.closure_phase_K1;
        j["closure_phase_K2"] = p.closure_phase_K2;
        j["v2_K1"] = p.v2_K1;
        j["v2_K2"] = p.v2_K2;
        j["dl_offload"] = p.dl_offload;
        j["dm_piston"] = p.dm_piston;
        j["pd_av"] = p.pd_av;
        j["pd_av_filtered"] = p.pd_av_filtered;
        j["test_ix"] = p.test_ix;
        j["test_n"] = p.test_n;
        j["locked"] = p.locked;
        j["cnt"] = p.cnt;
        j["itime"] = p.itime;
        j["gd_phasor_real"] = p.gd_phasor_real;
        j["gd_phasor_imag"] = p.gd_phasor_imag;
    }
    static void from_json(const json& j, Status& p) {
        p = Status();
        j.at("gd_bl").get_to(p.gd_bl);
        j.at("pd_bl").get_to(p.pd_bl);
        j.at("gd_tel").get_to(p.gd_tel);
        j.at("pd_tel").get_to(p.pd_tel);
        j.at("gd_snr").get_to(p.gd_snr);
        j.at("pd_snr").get_to(p.pd_snr);\
        j.at("closure_phase_K1").get_to(p.closure_phase_K1);
        j.at("closure_phase_K2").get_to(p.closure_phase_K2);
        j.at("v2_K1").get_to(p.v2_K1);
        j.at("v2_K2").get_to(p.v2_K2);
        j.at("dl_offload").get_to(p.dl_offload);
        j.at("dm_piston").get_to(p.dm_piston);
        j.at("pd_av").get_to(p.pd_av);
        j.at("pd_av_filtered").get_to(p.pd_av_filtered);
        j.at("test_ix").get_to(p.test_ix);
        j.at("test_n").get_to(p.test_n);
        j.at("locked").get_to(p.locked);
        j.at("cnt").get_to(p.cnt);
        j.at("itime").get_to(p.itime);
        j.at("gd_phasor_real").get_to(p.gd_phasor_real);
        j.at("gd_phasor_imag").get_to(p.gd_phasor_imag);
    }
   };
}
// End of file
// This file is generated by make_commander_structs.py
// Do not edit this file manually.
